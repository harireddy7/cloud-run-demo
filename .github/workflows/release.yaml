# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  GAR_JSON_KEY: ${{ secrets.GAR_JSON_KEY }}
  SERVICE: preview-demo
  IMAGE: preview-demo
  BASE_VERSION: 1.0.0

jobs:
  build-publish-deploy:
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:

      # 1. Checkout

      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Authenticate to GCP
        
      - name: Authenticate to GCP
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ env.GAR_JSON_KEY }}

      # 3. Authenticate Docker to Google Cloud Artifact Registry (GAR)

      - name: Login to Google Artifact Registry (GAR)
        id: docker-gar-auth
        run: |
          cat ${{ steps.gcp-auth.outputs.credentials_file_path }} | docker login -u _json_key --password-stdin ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Setup new docker image tag with publish path

      - name: Generate Docker image path
        id: docker-publish-path
        run: |
          echo "image_path=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE }}:${{ env.BASE_VERSION }}-${{ github.run_number }}" >> $GITHUB_OUTPUT

      # 4. Build Docker Image and Publish to GAR

      - name: Build and Push Image to GAR
        id: build-and-publish
        run: |
          docker build -t ${{ steps.docker-publish-path.outputs.image_path }} ./
          docker push ${{ steps.docker-publish-path.outputs.image_path }}

      # 5. Deploy the Image with Cloud Run

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.GAR_LOCATION }}
          image: ${{ steps.docker-publish-path.outputs.image_path }}

      # 6. Log the Cloud Run url output

      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
